<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright (C) 2014 Xillio (support@xillio.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<function>
    <description>
Execute a single SQL query.
    </description>
	<parameterDescriptions>
		<parameterDescription parameterName="query">
The query that will be used.
        </parameterDescription>
        <parameterDescription parameterName="parameters">
If your query requires input it is generally bad practice to use string concatenation to build your own queries. The correct way to do this it by using parameterization. This you can do in two ways.

### Named Parameters
To create parameters that are labeled, you can use the colon-syntax.

SELECT * from table WHERE column = :name

If you do this, the parameters input has to be an object containing all the used parameter labels as keys.

### Ordered Parameters
An other way is to not use labels but order your list for input parameters.

SELECT * from table WHERE column = ? AND other = ?

If you use this syntax, your parameters input should be a list containing the same amount of elements as question marks.
        </parameterDescription>
		<parameterDescription parameterName="timeout">
The amount of time the query is allowed to take.
        </parameterDescription>
		<parameterDescription parameterName="database">
The database parameter is optional, if not given the last used database will be used.
        </parameterDescription>
	</parameterDescriptions>
	<longDescription>
The timeout parameter is optional. The default is set to 30 seconds. When the query takes longer than the given timeout it will stop. A timeout of 0 means that there is no limit.

The return value of this construct depends on the type of query. If the query results in a result set it will return an iterator that will iterate over every row in that set. If the query is an update, insert or delete query it will return the number of affected rows.

If you want to pass a string containing a colon you could either escape the colon by preceding the colon with two backslashes (\\\\:), or insert the string in an object and use named parameters (see below) with that object. See an example of the latter solution in the code examples.
	</longDescription>
    <examples>
        <example title="Usage">
            <header>Create a table and insert data</header>
            <code>
                use MSSQL, System;

                // First we connect to a database
                MSSQL.connect(
                    "jdbc:sqlserver://localhost" ::
                    ";database=Database" ::
                    ";user=MyUserName" ::
                    ";password=MyPassword"
                );

                // Then we create a table
                MSSQL.query("CREATE TABLE test (id VARCHAR(20))");

                // And insert some data
                var insertQuery = "INSERT INTO test (id) VALUES (?)";
                var count = MSSQL.query(insertQuery, ["Hello"]);
                count += MSSQL.query(insertQuery, ["World"]);

                System.print("Inserted " :: count :: " rows");

                // Now we can query that data
                var rows = MSSQL.query("SELECT * FROM test");

                foreach(row in rows) {
                    System.print("Item: " :: row.id);
                }
            </code>
            <header>Explicitly pass a connection</header>
            <code>
                use MSSQL;

                // Connect to the database
                var connection = MSSQL.connect(
                    "jdbc:sqlserver://localhost" ::
                    ";database=Database" ::
                    ";user=MyUserName" ::
                    ";password=MyPassword"
                );

                // Now we can use this connection explicitly
                MSSQL.query("INSERT INTO example (name) VALUES (?)", ["Doe"], 0, connection);
            </code>
            <header>Use an object as parameters</header>
            <code>
                use MSSQL;

                // Connect to the database
                MSSQL.connect(
                    "jdbc:sqlserver://localhost" ::
                    ";database=Database" ::
                    ";user=MyUserName" ::
                    ";password=MyPassword"
                );

                var object = {
                    "firstName": "John",
                    "lastName": "Doe"
                };

                // Insert a row. Notice that we now use a different notation for the parameters
                MSSQL.query("INSERT INTO people (firstName, lastName) VALUES (:firstName, :lastName)", object);
            </code>
            <header>Use a string containing a colon as a parameter</header>
            <code>
                use MSSQL, System;

                // Connect to the database
                MSSQL.connect(
                    "jdbc:sqlserver://localhost" ::
                    ";database=Database" ::
                    ";user=MyUserName" ::
                    ";password=MyPassword"
                );

                // Select data from table where version contains a colon
                var rows = MSSQL.query("SELECT * FROM software WHERE version = :myVersion" , {"myVersion" : "1.0:2"});

                foreach(row in rows) {
                    System.print("Software: " :: row.name);
                }
            </code>
        </example>
    </examples>
    <references>
        <reference>connect</reference>
    </references>
</function>